import os
import sys
import transaction
import uuid
from sqlalchemy import exc
from sqlalchemy.sql import exists
from pyramid.scripts.common import parse_vars
from sqlalchemy import engine_from_config
from sqlalchemy.orm import sessionmaker
from pyramid.paster import (
    get_appsettings,
    setup_logging,
    )

from server.models import (
    # DBSession,
    Project,
    BudgetGroup,
    BudgetItem,
    # Base,
    )

from random import randint
from sqlalchemy import create_engine, ForeignKey
from sqlalchemy import Column, Date, Integer, String
from sqlalchemy.ext.declarative import declarative_base
# Base = declarative_base()
# engine = create_engine('sqlite:///server.sqlite')
# Base.metadata.create_all(engine)
# Base.metadata.bind = engine
# DBSession = sessionmaker(bind=engine)
# session = DBSession()

"""
Models file contains resources used in the project
"""

import uuid
from zope.sqlalchemy import ZopeTransactionExtension
from sqlalchemy.ext.declarative import declarative_base
import os

from sqlalchemy import (
    Column,
    Index,
    Integer,
    Text,
    ForeignKey,
    )

from sqlalchemy.orm import (
    scoped_session,
    sessionmaker,
    relationship,
    backref,
    )

import xlrd

# read a row slice
# print first_sheet.row_slice(rowx=0,
#                             start_colx=0,
#                             end_colx=2)

# Build the session and base used for the project
# DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))
# DBSession.execute('pragma foreign_keys=on')

# delete the database
os.remove("server.sqlite")

Base = declarative_base()

class Node(Base):
    """
    The Node class is an extrapolation of the objects used in this hierarchy.
    It has ID and ParentID attributes, the ParentID refers back to the ID
    of it's parent node.
    The ID of the node is generated by default using UUID.
    It also has a Children-Parent relationship attribute.
    """

    def getID():
        return uuid.uuid1().hex

    __tablename__ = 'Node'
    ID = Column(Text, primary_key=True, default=getID)
    ParentID = Column(Text, ForeignKey('Node.ID', ondelete='CASCADE'))
    type = Column(Text(50))

    Children = relationship("Node",
                backref=backref('Parent',
                                remote_side=[ID]
                                ),
                single_parent=True,
                cascade="all, delete, delete-orphan",
                passive_deletes = True
            )

    __mapper_args__ = {
        'polymorphic_identity':'Node',
        'polymorphic_on':type
    }

class Project(Node):
    """
    A table representing a Project in Optimate, it has an ID, Name, Description
    and ParentID that is the ID of its parent.
    It inherits from Node, and it's ID is linked to Node.ID
    It has copy and paste functions.
    """

    __tablename__ = 'Project'
    ID = Column(Text, ForeignKey('Node.ID', ondelete='CASCADE'), primary_key=True)
    Name = Column(Text)
    Description = Column(Text)

    __mapper_args__ = {
        'polymorphic_identity':'Project',
    }

    def copy(self, parentid):
        """
        copy returns an exact duplicate of this object,
        but with the ParentID specified.
        """

        return Project(Name=self.Name,
                        Description=self.Description,
                        ParentID=parentid)

    def paste(self, source, sourcechildren):
        """
        paste appends a source object to the children of this node,
        and then recursively does the same with each child of the source object.
        """

        self.Children.append(source)

        for child in sourcechildren:
            source.paste(child.copy(source.ID), child.Children)

    def getCost(self):
        total = 0
        for item in self.Children:
            total+=item.getCost()

        return total

class BudgetGroup(Node):
    """
    A table representing a BudgetGroup in Optimate, it has an ID, Name,
    Description and ParentID that is the ID of its parent.
    It inherits from Node, and it's ID is linked to Node.ID
    It has copy and paste functions.
    """

    __tablename__ = 'BudgetGroup'
    ID = Column(Text, ForeignKey('Node.ID', ondelete='CASCADE'), primary_key=True)
    Name = Column(Text)
    Description = Column(Text)

    __mapper_args__ = {
        'polymorphic_identity':'BudgetGroup',
    }

    def copy(self, parentid):
        """
        copy returns an exact duplicate of this object,
        but with the ParentID specified.
        """
        return BudgetGroup(Name=self.Name,
                            Description=self.Description,
                            ParentID=parentid)

    def paste(self, source, sourcechildren):
        """
        paste appends a source object to the children of this node,
        and then recursively does the same with each child of the source object.
        """

        self.Children.append(source)

        for child in sourcechildren:
            source.paste(child.copy(source.ID), child.Children)

    def getCost(self):
        total = 0
        for item in self.Children:
            total+=item.getCost()

        return total

class BudgetItem(Node):
    """
    A table representing a BudgetItem in Optimate, it has an ID, Name,
    Description, Quantity, Rate and ParentID that is the ID of its parent.
    """

    def getID():
        return uuid.uuid1().hex

    __tablename__ = 'BudgetItem'
    ID = Column(Text, ForeignKey('Node.ID', ondelete='CASCADE'), primary_key=True)
    Name = Column(Text)
    Description = Column(Text)
    Quantity = Column(Integer)
    Rate = Column(Integer)

    __mapper_args__ = {
        'polymorphic_identity':'BudgetItem',
    }

    def copy(self, parentid):
        """
        copy returns an exact duplicate of this object,
        but with the ParentID specified.
        """
        return BudgetItem(Name=self.Name,
                            Description=self.Description,
                            Quantity=self.Quantity,
                            Rate=self.Rate,
                            ParentID=parentid)

    def paste(self, source, sourcechildren):
        """
        paste appends a source object to the children of this node,
        and then recursively does the same with each child of the source object.
        """
        self.Children.append(source)

        for child in sourcechildren:
            source.paste(child.copy(source.ID), child.Children)

    def getCost(self):
        total = 0
        for item in self.Children:
            total+=item.getCost()

        return self.Quantity*self.Rate + total

engine = create_engine('sqlite:///server.sqlite')
Base.metadata.create_all(engine)
Base.metadata.bind = engine
DBSession = sessionmaker(bind=engine)
session = DBSession()

"""
Open and read an Excel file
"""
if 0 == len(session.query(Node).all()):
    projectbook = xlrd.open_workbook("/home/niel/projects/exceldata/Projects.xls")

    # # print number of sheets
    # # print book.nsheets

    # # print sheet names
    # # print book.sheet_names()

    # # get the first worksheet
    first_sheet = projectbook.sheet_by_index(0)

    # # read a row
    # print "\nreading a row: "
    # print first_sheet.row_values(0)
    # print first_sheet.nrows

    # # read a cell
    # #------------------------print codes
    codeindex = 0
    # cell = first_sheet.cell(1,codeindex)
    # print "\ncode value: "
    # print int(cell.value)

    # #------------------------print names
    nameindex = 1
    # cell = first_sheet.cell(1,nameindex)
    # print "\nname value: "
    # print (cell.value)

    # #------------------------print description
    descriptionindex = 2
    # cell = first_sheet.cell(1,descriptionindex)
    # print "\ndescription value: "
    # print (cell.value)

    # build the projects
    for x in range (1, first_sheet.nrows):
        code = str(int(first_sheet.cell(x,codeindex).value))
        name = first_sheet.cell(x, nameindex).value
        description = first_sheet.cell(x, descriptionindex).value

        project = Project(ID=code, Name=name, Description=description, ParentID='0')
        session.add(project)

    session.commit()

    #build the budgetgroups
    budgetgroupbook = xlrd.open_workbook("/home/niel/projects/exceldata/BudgetGroups.xls")

    # print number of sheets
    # print book.nsheets

    # print sheet names
    # print book.sheet_names()

    # get the first worksheet
    sheet = budgetgroupbook.sheet_by_index(0)

    # read a row
    # print "\nreading a row: "
    # print sheet.row_values(0)
    # print sheet.nrows

    # read a cell
    #------------------------print codes
    codeindex = 0
    # cell = sheet.cell(1,codeindex)
    # print "\ncode value: "
    # print int(cell.value)

    #------------------------print names
    nameindex = 1
    cell = sheet.cell(0,nameindex)
    # print "\nname value: "
    print (cell.value)

    #------------------------print parent
    parentindex = 2
    # cell = sheet.cell(1,parentindex)
    # print "\nparent value: "
    print str(int(abs(sheet.cell(2,parentindex).value)))

    #------------------------print description
    descriptionindex = 3
    # cell = sheet.cell(1,descriptionindex)
    # print "\ndescription value: "
    # print (cell.value)

    # build the budgetgroups
    for x in range (1, sheet.nrows):
        code = str(int(sheet.cell(x,codeindex).value))
        name = sheet.cell(x, nameindex).value
        description = sheet.cell(x, descriptionindex).value
        try:
            parentcode = str(int(abs(sheet.cell(x,parentindex).value)))
        except TypeError, e:
            parentcode = "0"

        bg = BudgetGroup(ID=code, Name=name, Description=description, ParentID=parentcode)
        session.add(bg)

    session.commit()

    # build is again adding the heirarchy
    qry = session.query(BudgetGroup).all()
    for bg in qry:
        #get the id
        parentid = bg.ParentID
        # get the parent
        parent = session.query(Node).filter_by(ID=parentid).first()
        parent.Children.append(bg)

    session.commit()

    #build the budgetitems
    budgetitembook = xlrd.open_workbook("/home/niel/projects/exceldata/Budgetitems.xls")
    sheet = budgetitembook.sheet_by_index(0)
    codeindex = 0
    nameindex = 1
    parentindex = 2
    descriptionindex = 3
    quantityindex = 13
    rateindex = 14

    # build the budgetitems
    for x in range (1, sheet.nrows):
        code = str(int(sheet.cell(x,codeindex).value))
        name = sheet.cell(x, nameindex).value
        description = sheet.cell(x, descriptionindex).value
        parentcode = str(int(abs(sheet.cell(x,parentindex).value)))
        quantity = int(sheet.cell(x,quantityindex).value)
        rate = int(sheet.cell(x,rateindex).value)

        bi = BudgetItem(ID=code, Name=name, Description=description, ParentID=parentcode, Quantity=quantity, Rate=rate)
        session.add(bi)

    session.commit()

    # build it again adding the heirarchy
    qry = session.query(BudgetItem).all()
    for bi in qry:
        #get the id
        parentid = bi.ParentID
        # get the parent
        parent = session.query(Node).filter_by(ID=parentid).first()
        parent.Children.append(bi)

    session.commit()

else:
    print "db already exists"

# for p in range(1, 11):
#     project = Project(Name="Project"+str(p), Description="projectdescription", ParentID='0')
#     print "adding: " + str(p)
#     # Build 100 budgetgroups
#     for bga in range(1, 11):
#         budgetgroupa = BudgetGroup(Name="BudgetGA"+str(bga), Description="bgadescription", ParentID=project.ID)

#         # Build 100 budgetgroups
#         for bgb in range(1, 11):
#             budgetgroupb = BudgetGroup(Name="BudgetGB", Description="bgbdescription", ParentID=budgetgroupa.ID)

#             # Build 1000 budgetitems
#             for bi in range(1, 11):
#                 budgetitem = BudgetItem(Name="BudgetItem", Description="bidescription", Quantity=randint(1, 100), Rate=randint(1, 100), ParentID=budgetgroupb.ID)
#                 budgetgroupb.Children.append(budgetitem)
#             # gc.collect()
#             budgetgroupa.Children.append(budgetgroupb)
#             # print "added to bg a"
#         # gc.collect()
#         project.Children.append(budgetgroupa)
#         # print "added to project: " + str(p)

#     session.add(project)
#     session.commit()

print "done"
